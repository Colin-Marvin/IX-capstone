{"ast":null,"code":"const createBlog = async blog => {\n  const response = await fetch(\"http://localhost:8000/api/blogs\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(blog)\n  });\n  if (!response.ok) {\n    let res = await response.json();\n    throw res.message || res;\n  }\n  const responseData = await response.json();\n  return responseData;\n};\nconst fetchBlogs = async () => {\n  try {\n    const data = await fetch(\"http://localhost:8000/api/blogs\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const blogsApiData = await data.json();\n    return blogsApiData.data;\n  } catch (error) {\n    return error;\n  }\n};\nconst fetchBlogById = async id => {\n  try {\n    const data = await fetch(\"http://localhost:8000/api/blogs/\" + id, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const blogsApiData = await data.json();\n    return blogsApiData.data;\n  } catch (error) {\n    // return error;\n  }\n};\nconst fetchBlogsByCategoryId = async categoryId => {\n  try {\n    const data = await fetch(\"http://localhost:8000/api/blogs/categories/\" + categoryId, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const blogsApiData = await data.json();\n    return blogsApiData.data;\n  } catch (error) {\n    // return error;\n  }\n};\nconst fetchBlogsByAuthorId = async authorId => {\n  const response = await fetch(\"http://localhost:8000/api/blogs/author/\" + authorId, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  if (!response.ok) {\n    let res = await response.json();\n    throw res;\n  }\n  const responseData = await response.json();\n  return responseData;\n};\nconst updateBlog = async blog => {\n  const response = await fetch(\"http://localhost:8000/api/blogs/\" + blog.get(\"id\"), {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: blog\n  });\n  if (!response.ok) {\n    let res = await response.json();\n    throw res;\n  }\n  const responseData = await response.json();\n  return responseData;\n};\nconst deleteBlogsById = async id => {\n  const response = await fetch(\"http://localhost:8000/api/blogs/\" + id, {\n    method: \"DELETE\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  if (!response.ok) {\n    let res = await response.json();\n    throw res;\n  }\n  const responseData = await response.json();\n  return responseData;\n};\nconst blogService = {\n  createBlog,\n  fetchBlogs,\n  fetchBlogById,\n  fetchBlogsByCategoryId,\n  fetchBlogsByAuthorId,\n  updateBlog,\n  deleteBlogsById\n};\nexport default blogService;","map":{"version":3,"names":["createBlog","blog","response","fetch","method","headers","body","JSON","stringify","ok","res","json","message","responseData","fetchBlogs","data","blogsApiData","error","fetchBlogById","id","fetchBlogsByCategoryId","categoryId","fetchBlogsByAuthorId","authorId","updateBlog","get","deleteBlogsById","blogService"],"sources":["/Users/cutlass/Downloads/IX/ix-blog-app/frontend/src/services/blogService.js"],"sourcesContent":["const createBlog = async (blog) => {\n  const response = await fetch(\"http://localhost:8000/api/blogs\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(blog),\n  });\n\n  if (!response.ok) {\n    let res = await response.json();\n    throw res.message || res;\n  }\n\n  const responseData = await response.json();\n  return responseData;\n};\n\nconst fetchBlogs = async () => {\n  try {\n    const data = await fetch(\"http://localhost:8000/api/blogs\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n    const blogsApiData = await data.json();\n    return blogsApiData.data;\n  } catch (error) {\n    return error;\n  }\n};\n\nconst fetchBlogById = async (id) => {\n  try {\n    const data = await fetch(\"http://localhost:8000/api/blogs/\" + id, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n    const blogsApiData = await data.json();\n    return blogsApiData.data;\n  } catch (error) {\n    // return error;\n  }\n};\n\nconst fetchBlogsByCategoryId = async (categoryId) => {\n  try {\n    const data = await fetch(\n      \"http://localhost:8000/api/blogs/categories/\" + categoryId,\n      {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    );\n    const blogsApiData = await data.json();\n    return blogsApiData.data;\n  } catch (error) {\n    // return error;\n  }\n};\n\nconst fetchBlogsByAuthorId = async (authorId) => {\n  const response = await fetch(\n    \"http://localhost:8000/api/blogs/author/\" + authorId,\n    {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    }\n  );\n\n  if (!response.ok) {\n    let res = await response.json();\n    throw res;\n  }\n\n  const responseData = await response.json();\n  return responseData;\n};\n\nconst updateBlog = async (blog) => {\n  const response = await fetch(\n    \"http://localhost:8000/api/blogs/\" + blog.get(\"id\"),\n    {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: blog,\n    }\n  );\n\n  if (!response.ok) {\n    let res = await response.json();\n    throw res;\n  }\n\n  const responseData = await response.json();\n  return responseData;\n};\n\nconst deleteBlogsById = async (id) => {\n  const response = await fetch(\"http://localhost:8000/api/blogs/\" + id, {\n    method: \"DELETE\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n\n  if (!response.ok) {\n    let res = await response.json();\n    throw res;\n  }\n\n  const responseData = await response.json();\n  return responseData;\n};\n\nconst blogService = {\n  createBlog,\n  fetchBlogs,\n  fetchBlogById,\n  fetchBlogsByCategoryId,\n  fetchBlogsByAuthorId,\n  updateBlog,\n  deleteBlogsById,\n};\n\nexport default blogService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}