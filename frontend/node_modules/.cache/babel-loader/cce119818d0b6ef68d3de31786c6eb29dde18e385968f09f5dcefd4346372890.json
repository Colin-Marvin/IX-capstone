{"ast":null,"code":"const createBlog=async blog=>{const response=await fetch(\"http://localhost:8000/api/blogs\",{method:\"POST\",headers:{Authorization:\"Bearer \"+JSON.parse(localStorage.getItem(\"user\")).token},body:blog});if(!response.ok){try{let res=await response.json();throw res.message||JSON.stringify(res);}catch(err){console.log(err);const error=new Error(\"Something went wrong\");throw error.message;}}const blogsApiData=await response.json();return blogsApiData;};const fetchBlogs=async()=>{const response=await fetch(\"http://localhost:8000/api/blogs\",{method:\"GET\",headers:{\"Content-Type\":\"application/json\"}});if(!response.ok){try{let res=await response.json();throw res.message||JSON.stringify(res);}catch(err){console.log(err);const error=new Error(\"Something went wrong\");throw error.message;}}const blogsApiData=await response.json();return blogsApiData;};const fetchBlogByID=async id=>{const response=await fetch(\"http://localhost:8000/api/blogs/\"+id,{method:\"GET\",headers:{\"Content-Type\":\"application/json\"}});if(!response.ok){try{let res=await response.json();throw res.message||JSON.stringify(res);}catch(err){console.log(err);const error=new Error(\"Something went wrong\");throw error.message;}}const blogsApiData=await response.json();return blogsApiData;};const fetchBlogsByCategoryId=async categoryId=>{const response=await fetch(\"http://localhost:8000/api/blogs/categories/\"+categoryId,{method:\"GET\",headers:{\"Content-Type\":\"application/json\"}});if(!response.ok){try{let res=await response.json();throw res.message||JSON.stringify(res);}catch(err){console.log(err);const error=new Error(\"Something went wrong\");throw error.message;}}const blogsApiData=await response.json();return blogsApiData;};const fetchBlogsByAuthorId=async authorId=>{const response=await fetch(\"http://localhost:8000/api/blogs/author/\"+authorId,{method:\"GET\",headers:{\"Content-Type\":\"application/json\"}});if(!response.ok){try{let res=await response.json();throw res.message||JSON.stringify(res);}catch(err){console.log(err);const error=new Error(\"Something went wrong\");throw error.message;}}const blogsApiData=await response.json();return blogsApiData;};const updateBlog=async blog=>{const response=await fetch(\"http://localhost:8000/api/blogs/\"+blog.get(\"id\"),{method:\"PUT\",headers:{Authorization:\"Bearer \"+JSON.parse(localStorage.getItem(\"user\")).token},body:blog});if(!response.ok){try{let res=await response.json();throw res.message||JSON.stringify(res);}catch(err){console.log(err);const error=new Error(\"Something went wrong\");throw error.message;}}const blogsApiData=await response.json();return blogsApiData;};const deleteBlog=async id=>{const response=await fetch(\"http://localhost:8000/api/blogs/\"+id,{method:\"DELETE\",headers:{\"Content-Type\":\"application/json\",Authorization:\"Bearer \"+JSON.parse(localStorage.getItem(\"user\")).token}});if(!response.ok){try{let res=await response.json();throw res.message||JSON.stringify(res);}catch(err){console.log(err);const error=new Error(\"Something went wrong\");throw error.message;}}const blogsApiData=await response.json();return blogsApiData;};const blogService={createBlog,fetchBlogs,fetchBlogByID,fetchBlogsByCategoryId,fetchBlogsByAuthorId,updateBlog,deleteBlog};export default blogService;","map":{"version":3,"names":["createBlog","blog","response","fetch","method","headers","Authorization","JSON","parse","localStorage","getItem","token","body","ok","res","json","message","stringify","err","console","log","error","Error","blogsApiData","fetchBlogs","fetchBlogByID","id","fetchBlogsByCategoryId","categoryId","fetchBlogsByAuthorId","authorId","updateBlog","get","deleteBlog","blogService"],"sources":["/Users/cutlass/Downloads/IX/ix-blog-app/frontend/src/services/blogService.js"],"sourcesContent":["const createBlog = async (blog) => {\n  const response = await fetch(\"http://localhost:8000/api/blogs\", {\n    method: \"POST\",\n    headers: {\n      Authorization: \"Bearer \" + JSON.parse(localStorage.getItem(\"user\")).token,\n    },\n    body: blog,\n  });\n\n  if (!response.ok) {\n    try {\n      let res = await response.json();\n      throw res.message || JSON.stringify(res);\n    } catch (err) {\n      console.log(err);\n      const error = new Error(\"Something went wrong\");\n      throw error.message;\n    }\n  }\n\n  const blogsApiData = await response.json();\n  return blogsApiData;\n};\n\nconst fetchBlogs = async () => {\n  const response = await fetch(\"http://localhost:8000/api/blogs\", {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n\n  if (!response.ok) {\n    try {\n      let res = await response.json();\n      throw res.message || JSON.stringify(res);\n    } catch (err) {\n      console.log(err);\n      const error = new Error(\"Something went wrong\");\n      throw error.message;\n    }\n  }\n\n  const blogsApiData = await response.json();\n  return blogsApiData;\n};\n\nconst fetchBlogByID = async (id) => {\n  const response = await fetch(\"http://localhost:8000/api/blogs/\" + id, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n  if (!response.ok) {\n    try {\n      let res = await response.json();\n      throw res.message || JSON.stringify(res);\n    } catch (err) {\n      console.log(err);\n      const error = new Error(\"Something went wrong\");\n      throw error.message;\n    }\n  }\n\n  const blogsApiData = await response.json();\n  return blogsApiData;\n};\n\nconst fetchBlogsByCategoryId = async (categoryId) => {\n  const response = await fetch(\n    \"http://localhost:8000/api/blogs/categories/\" + categoryId,\n    {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    }\n  );\n  if (!response.ok) {\n    try {\n      let res = await response.json();\n      throw res.message || JSON.stringify(res);\n    } catch (err) {\n      console.log(err);\n      const error = new Error(\"Something went wrong\");\n      throw error.message;\n    }\n  }\n\n  const blogsApiData = await response.json();\n  return blogsApiData;\n};\n\nconst fetchBlogsByAuthorId = async (authorId) => {\n  const response = await fetch(\n    \"http://localhost:8000/api/blogs/author/\" + authorId,\n    {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    }\n  );\n  if (!response.ok) {\n    try {\n      let res = await response.json();\n      throw res.message || JSON.stringify(res);\n    } catch (err) {\n      console.log(err);\n      const error = new Error(\"Something went wrong\");\n      throw error.message;\n    }\n  }\n\n  const blogsApiData = await response.json();\n  return blogsApiData;\n};\n\nconst updateBlog = async (blog) => {\n  const response = await fetch(\n    \"http://localhost:8000/api/blogs/\" + blog.get(\"id\"),\n    {\n      method: \"PUT\",\n      headers: {\n        Authorization:\n          \"Bearer \" + JSON.parse(localStorage.getItem(\"user\")).token,\n      },\n      body: blog,\n    }\n  );\n  if (!response.ok) {\n    try {\n      let res = await response.json();\n      throw res.message || JSON.stringify(res);\n    } catch (err) {\n      console.log(err);\n      const error = new Error(\"Something went wrong\");\n      throw error.message;\n    }\n  }\n\n  const blogsApiData = await response.json();\n  return blogsApiData;\n};\n\nconst deleteBlog = async (id) => {\n  const response = await fetch(\"http://localhost:8000/api/blogs/\" + id, {\n    method: \"DELETE\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: \"Bearer \" + JSON.parse(localStorage.getItem(\"user\")).token,\n    },\n  });\n\n  if (!response.ok) {\n    try {\n      let res = await response.json();\n      throw res.message || JSON.stringify(res);\n    } catch (err) {\n      console.log(err);\n      const error = new Error(\"Something went wrong\");\n      throw error.message;\n    }\n  }\n\n  const blogsApiData = await response.json();\n  return blogsApiData;\n};\n\nconst blogService = {\n  createBlog,\n  fetchBlogs,\n  fetchBlogByID,\n  fetchBlogsByCategoryId,\n  fetchBlogsByAuthorId,\n  updateBlog,\n  deleteBlog,\n};\n\nexport default blogService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}